/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockV3Aggregator,
  MockV3AggregatorInterface,
} from "../../contracts/MockV3Aggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newAnswer",
        type: "int256",
      },
    ],
    name: "updateAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161012838038061012883398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60ca8061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063a87a20ce146037578063feaf968c146049575b600080fd5b60476042366004607c565b600055565b005b60008054604080518381526020810192909252818101839052426060830152608082019290925290519081900360a00190f35b600060208284031215608d57600080fd5b503591905056fea2646970667358221220ea024d00367e1610f6be0143f78507149da50ca9dd2682f3543ee9e88a5cd03764736f6c63430008180033";

type MockV3AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockV3AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockV3Aggregator__factory extends ContractFactory {
  constructor(...args: MockV3AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialAnswer, overrides || {});
  }
  override deploy(
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialAnswer, overrides || {}) as Promise<
      MockV3Aggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockV3Aggregator__factory {
    return super.connect(runner) as MockV3Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockV3AggregatorInterface {
    return new Interface(_abi) as MockV3AggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockV3Aggregator {
    return new Contract(address, _abi, runner) as unknown as MockV3Aggregator;
  }
}
